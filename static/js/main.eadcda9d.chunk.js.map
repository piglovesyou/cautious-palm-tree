{"version":3,"sources":["scrollbarWidth.ts","makeData.ts","undoable.ts","App.tsx","index.tsx"],"names":["scrollbarWidth","scrollDiv","document","createElement","setAttribute","body","appendChild","offsetWidth","clientWidth","removeChild","range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","namor","generate","words","numbers","lastName","age","floor","visits","progress","status","Undoable","data","max","Object","classCallCheck","this","curr","hist","pos","createClass","key","value","rowIndex","columnId","create","length","shift","window","alert","__proto__","Array","prototype","Error","nextPos","newData","map","e","Styles","styled","div","withConfig","displayName","componentId","defaultColumn","Cell","_ref","initialValue","index","row","id","column","updateMyData","valueRef","useRef","onBlur","useCallback","currentTarget","current","onFocus","react_default","a","defaultValue","width","Table","_ref2","columns","scrollBarSize","React","useMemo","_useTable","useTable","useBlockLayout","getTableProps","getTableBodyProps","headerGroups","rows","totalColumnsWidth","prepareRow","RenderRow","_ref3","style","assign","getRowProps","className","cells","cell","getCellProps","render","blaa","_useState","useState","_useState2","slicedToArray","wh","updateWh","useEffect","headerHeight","querySelector","offsetHeight","headerGroup","getHeaderGroupProps","headers","getHeaderProps","index_esm","height","itemCount","itemSize","App","Header","accessor","undoable","_len","arguments","lens","_key","makeDataLevel","depth","undefined","d","objectSpread","subRows","makeData","_React$useState","getData","_React$useState2","setData","addEventListener","metaKey","shiftKey","redo","undo","setNewValue","ReactDOM","src_App","getElementById"],"mappings":"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","file":"static/js/main.eadcda9d.chunk.js","sourcesContent":["const scrollbarWidth = () => {\n    // thanks too https://davidwalsh.name/detect-scrollbar-width\n    const scrollDiv = document.createElement('div')\n    scrollDiv.setAttribute('style', 'width: 100px; height: 100px; overflow: scroll; position:absolute; top:-9999px;')\n    document.body.appendChild(scrollDiv)\n    const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n    document.body.removeChild(scrollDiv)\n    return scrollbarWidth\n}\n  \nexport default scrollbarWidth","import namor from 'namor'\n\nconst range = len => {\n  const arr: number[] = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst newPerson = () => {\n  const statusChance = Math.random()\n  return {\n    firstName: namor.generate({ words: 1, numbers: 0 }),\n    lastName: namor.generate({ words: 1, numbers: 0 }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status:\n      statusChance > 0.66\n        ? 'relationship'\n        : statusChance > 0.33\n        ? 'complicated'\n        : 'single',\n  }\n}\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth]\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n","export class Undoable<CellType> {\n  curr;\n  max: number\n  hist: CellType[][] = [];\n  pos: number = 0;\n  constructor(data, max) {\n    this.hist.push(this.curr = data);\n    this.max = max\n  }\n  setNewValue(rowIndex, columnId, value) {\n    const data = this.curr = Object.create(this.curr);\n    const cellData = data[rowIndex] = Object.create(data[rowIndex]);\n    cellData[columnId] = value;\n\n    this.hist.push(data);\n    if (this.hist.length > this.max)\n      this.hist.shift();\n    else\n      this.pos = this.hist.length - 1\n    return this.curr;\n  }\n  undo() {\n    if (this.pos <= 0) {\n      window.alert(`Unable to undo. You're already in the edge of history.`)\n      return this.curr;\n    }\n    if (this.curr.__proto__ === Array.prototype) throw new Error('Never');\n    let nextPos = this.pos - 1;\n    if (this.hist[nextPos] !== this.curr.__proto__) throw new Error('Never');\n    this.pos = nextPos;\n    return this.curr = this.curr.__proto__;\n  }\n  redo() {\n    let nextPos = this.pos + 1;\n    const newData = this.hist[nextPos];\n    if (!newData) {\n      window.alert(`Unable to redo. You're already in the edge of history.`)\n      return this.curr;\n    }\n    if(this.pos >= this.max - 1) throw new Error('Never')\n    this.pos = nextPos;\n    return this.curr = newData;\n  }\n  getData() {\n    return this.curr;\n  }\n  toArray() {\n    return this.curr.map(e => e);\n  }\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { FocusEvent } from \"react\";\nimport styled from 'styled-components';\nimport { useTable, useBlockLayout } from 'react-table';\nimport { FixedSizeList } from 'react-window';\nimport scrollbarWidth from './scrollbarWidth';\n\nimport makeData from './makeData';\nimport { Undoable } from \"./undoable\";\n\nconst Styles = styled.div`\n\n  /* This is required to make the table full-width */\n  display: block;\n  max-width: 100%;\n\n  /* This will make the table scrollable when it gets too small */\n  .tableWrap {\n    display: block;\n    max-width: 100%;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    /* border-bottom: 1px solid black; */\n  }\n\n  .table {\n    /* Make sure the inner table is always as wide as needed */\n    width: 100%;\n    border-spacing: 0;\n\n    .tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    .th,\n    .td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      /* The secret sauce */\n      /* Each cell should grow equally */\n      width: 1%;\n      /* But \"collapsed\" cells should be as small as possible */\n      &.collapse {\n        width: 0.0000000001%;\n      }\n\n      :last-child {\n        border-right: 0;\n      }\n      \n      input {\n        font-size: 1rem;\n        max-width: 100%;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n  `;\n\n\n// Create an editable cell renderer\nconst EditableCell = ({\n                        value: initialValue,\n                        row: { index },\n                        column: { id },\n                        updateMyData, // This is a custom function that we supplied to our table instance\n                      }) => {\n  const valueRef = useRef<string>('');\n\n  // We need to keep and update the state of the cell normally\n  // const [value, setValue] = React.useState(initialValue)\n\n  // const onChange = e => {\n  //   setValue(e.target.value)\n  // }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = useCallback((e: FocusEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    if (valueRef.current === value) return;\n    updateMyData(index, id, value);\n  }, []);\n\n  const onFocus = useCallback((e: FocusEvent<HTMLInputElement>) => {\n    valueRef.current = e.currentTarget.value;\n  }, []);\n\n  // // If the initialValue is changed external, sync it up with our state\n  // React.useEffect(() => {\n  //   setValue(initialValue)\n  // }, [initialValue])\n\n  return <input defaultValue={ initialValue }\n                onFocus={ onFocus }\n                onBlur={ onBlur }/>;\n};\n\n// Set our editable cell renderer as the default Cell renderer\nconst defaultColumn = {\n  Cell: EditableCell,\n  width: 150,\n};\n\nfunction Table({ columns, data, updateMyData }) {\n\n  const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    totalColumnsWidth,\n    prepareRow,\n  } = useTable<{ updateMyData: any }>(\n      {\n        columns,\n        data,\n        defaultColumn,\n        // autoResetPage: !skipPageReset,\n        // @ts-ignore\n        updateMyData,\n      },\n      useBlockLayout\n  );\n\n  const RenderRow = React.useCallback(\n      ({ index, style }) => {\n        const row = rows[index];\n        prepareRow(row);\n        return (\n            <div\n                { ...row.getRowProps({\n                  style,\n                }) }\n                className=\"tr\"\n            >\n              { row.cells.map(cell => {\n                return (\n                    <div { ...cell.getCellProps() } className=\"td\">\n                      { cell.render('Cell', { blaa: 'blaa' }) }\n                    </div>\n                );\n              }) }\n            </div>\n        );\n      },\n      [ prepareRow, rows ]\n  );\n\n  const [ wh, updateWh ] = useState(400);\n  useEffect(() => {\n    const headerHeight = document.querySelector<HTMLDivElement>('.table > :not([role=\"rowgroup\"])')!.offsetHeight;\n    updateWh(window.document.body.offsetHeight - headerHeight);\n  }, []);\n\n  // Render the UI for your table\n  return (\n\n      <Styles>\n        <div className=\"tableWrap\">\n          <div { ...getTableProps() } className=\"table\">\n            <div>\n              { headerGroups.map(headerGroup => (\n                  <div { ...headerGroup.getHeaderGroupProps() } className=\"tr\">\n                    { headerGroup.headers.map(column => (\n                        <div { ...column.getHeaderProps() } className=\"th\">\n                          { column.render('Header') }\n                        </div>\n                    )) }\n                  </div>\n              )) }\n            </div>\n\n            <div { ...getTableBodyProps() }>\n              <FixedSizeList\n                  height={ wh }\n                  itemCount={ rows.length }\n                  itemSize={ 35 }\n                  width={ totalColumnsWidth + scrollBarSize }\n              >\n                { RenderRow }\n              </FixedSizeList>\n            </div>\n          </div>\n        </div>\n      </Styles>\n  );\n}\n\n\nfunction App() {\n  const columns = useMemo(\n      () => [\n        {\n          Header: 'Row Index',\n          accessor: (row, i) => i,\n        },\n        {\n          Header: 'Name',\n          columns: [\n            {\n              Header: 'First Name',\n              accessor: 'firstName',\n            },\n            {\n              Header: 'Last Name',\n              accessor: 'lastName',\n            },\n          ],\n        },\n        {\n          Header: 'Info',\n          columns: [\n            {\n              Header: 'Age',\n              accessor: 'age',\n              width: 50,\n            },\n            {\n              Header: 'Visits',\n              accessor: 'visits',\n              width: 60,\n            },\n            {\n              Header: 'Status',\n              accessor: 'status',\n            },\n            {\n              Header: 'Profile Progress',\n              accessor: 'progress',\n            },\n          ],\n        },\n      ],\n      []\n  );\n\n  const undoable = useMemo(() => new Undoable(makeData(100000), 10), []);\n  const [ data, setData ] = React.useState(undoable.getData());\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    // debugger\n    setData(undoable.setNewValue(rowIndex, columnId, value));\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      if (!e.metaKey) return;\n      if (e.key !== 'z') return;\n      if (e.shiftKey) setData(undoable.redo())\n      else setData(undoable.undo())\n    });\n  }, []);\n\n  return (\n      <Table columns={ columns } data={ data }\n             updateMyData={ updateMyData }\n      />\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}